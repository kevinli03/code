[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kevin’s Coding Resources",
    "section": "",
    "text": "Welcome!\nThis is a repository of coding resources for myself (and anyone else who wants to use it). Since I am a political economist, most of these resources focus around tasks regarding econometrics, statistics, and (some) data science.\nThe languages I include on here include R, python, and julia. This is being continuously updated - it is basically my code reference for stuff I am using right now.\nFor R code relating to difference-in-differences or causal panel analysis, see this repository.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "syntax.html",
    "href": "syntax.html",
    "title": "basics syntax",
    "section": "",
    "text": "setting up packages, assignment and operations, if statements, for loops, functions\n\n\ninstalling packages\n\n\nloading packages\n\n\nworking directory\n\n\nobjects\n\n\noperations\n\n\nif statements\n\n\nif-else functions\n\n\nfor loops\n\n\nfunctions",
    "crumbs": [
      "basic syntax"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "data wrangling",
    "section": "",
    "text": "importing data, filtering and sorting, managing data\n\nThis page covers how to import, manipulate, and manage data. For data summary, see here. Use the sidebar to navigate between different sections.\n\nRPythonJulia\n\n\nFor the R code on this page, we will need the tidyverse package.\n\n# packages needed:\nlibrary(tidyverse)\n\n\n\n\n\n\n\n\n\n\n\n\nimporting data\nWe can import data from a variety of different file types.\n\nRPythonJulia\n\n\nLoad .csv files (comma seperated format) into object df:\n\ndf = read_csv('data.csv')\n\nLoad .dta files (stata format) into object df:\n\nlibrary(haven)\ndf = read_dta('data.dta')\n\n\n\n\n\n\n\n\n\n\n\n\n\npreview data\nGetting a brief overview of our data before we change/filter/select it.\n\nRPythonJulia\n\n\nUsing function head() to see the first few rows of the dataframe df:\n\nhead(df)\n\n#&gt; # A tibble: 6 × 13\n#&gt;      id countryid countryname countrycode  year   voc taxpercent corporatetax\n#&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n#&gt; 1     1         1 australia   aus          2004     0       30.1           30\n#&gt; 2     2         1 australia   aus          2005     0       29.8           30\n#&gt; 3     3         1 australia   aus          2006     0       29.3           30\n#&gt; 4     4         1 australia   aus          2007     0       29.4           30\n#&gt; 5     5         1 australia   aus          2008     0       26.7           30\n#&gt; 6     6         1 australia   aus          2009     0       25.4           30\n#&gt; # ℹ 5 more variables: personaltax &lt;dbl&gt;, econglobal &lt;dbl&gt;, gini &lt;dbl&gt;,\n#&gt; #   socialexp &lt;dbl&gt;, export &lt;dbl&gt;\n\n\nUsing function glimpse() to see a summary of columns (variables) of df:\n\nglimpse(df)\n\n#&gt; Rows: 255\n#&gt; Columns: 13\n#&gt; $ id           &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n#&gt; $ countryid    &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, …\n#&gt; $ countryname  &lt;chr&gt; \"australia\", \"australia\", \"australia\", \"australia\", \"aust…\n#&gt; $ countrycode  &lt;chr&gt; \"aus\", \"aus\", \"aus\", \"aus\", \"aus\", \"aus\", \"aus\", \"aus\", \"…\n#&gt; $ year         &lt;dbl&gt; 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 201…\n#&gt; $ voc          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ taxpercent   &lt;dbl&gt; 30.145, 29.849, 29.301, 29.423, 26.743, 25.425, 25.160, 2…\n#&gt; $ corporatetax &lt;dbl&gt; 30.00, 30.00, 30.00, 30.00, 30.00, 30.00, 30.00, 30.00, 3…\n#&gt; $ personaltax  &lt;dbl&gt; 31.50, 31.50, 31.50, 31.50, 31.50, 31.50, 31.50, 31.50, 3…\n#&gt; $ econglobal   &lt;dbl&gt; 66.901, 66.871, 68.431, 69.648, 66.550, 67.422, 67.356, 6…\n#&gt; $ gini         &lt;dbl&gt; 33.1, 33.1, 33.1, 33.1, 35.4, 35.4, 34.7, 34.7, 34.7, 34.…\n#&gt; $ socialexp    &lt;dbl&gt; 17.197, 16.660, 15.699, 15.858, 17.050, 16.853, 16.553, 1…\n#&gt; $ export       &lt;dbl&gt; 18.224, 19.854, 20.184, 20.149, 23.011, 19.795, 21.436, 2…\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nselecting variables\nSelection variables involves choosing only a subset of the variables from the original dataframe. For example, you have 10 variables, but you only need 4 for analysis.\n\nRPythonJulia\n\n\nTo select only 1 variable (the column vector) from dataframe df into new dataframe new.df, we use the following syntax:\n\nnew.df = df$gini  # select variable \"gini\" from df\n\nhead(new.df)      # display first few obs\n\n#&gt; [1] 33.1 33.1 33.1 33.1 35.4 35.4\n\n\nWe can also use this single variable selection to modify the values of the variable. Simply assign new values to the variable with the assignment operator = or &lt;-.\nTo select more than 1 variable, use the select() function:\n\nnew.df = df |&gt;\n  select(gini, export, voc)  # select variables \"gini\", \"export\", \"voc\"\n\nhead(new.df)                 # display first few obs\n\n#&gt; # A tibble: 6 × 3\n#&gt;    gini export   voc\n#&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  33.1   18.2     0\n#&gt; 2  33.1   19.9     0\n#&gt; 3  33.1   20.2     0\n#&gt; 4  33.1   20.1     0\n#&gt; 5  35.4   23.0     0\n#&gt; 6  35.4   19.8     0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltering observations\nFiltering observations involves only keeping certain observations with certain values. For example, only keeping observations from the country of Canada.\n\nRPythonJulia\n\n\nWe can filter for only observations that meet certain conditions with the filter() function. We input the condition within the filter() function to create a new dataframe new.df from our original df:\n\nnew.df = df |&gt;\n  filter(countryname == \"australia\")  # keep only observations from australia\n\nhead(new.df)\n\n#&gt; # A tibble: 6 × 13\n#&gt;      id countryid countryname countrycode  year   voc taxpercent corporatetax\n#&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n#&gt; 1     1         1 australia   aus          2004     0       30.1           30\n#&gt; 2     2         1 australia   aus          2005     0       29.8           30\n#&gt; 3     3         1 australia   aus          2006     0       29.3           30\n#&gt; 4     4         1 australia   aus          2007     0       29.4           30\n#&gt; 5     5         1 australia   aus          2008     0       26.7           30\n#&gt; 6     6         1 australia   aus          2009     0       25.4           30\n#&gt; # ℹ 5 more variables: personaltax &lt;dbl&gt;, econglobal &lt;dbl&gt;, gini &lt;dbl&gt;,\n#&gt; #   socialexp &lt;dbl&gt;, export &lt;dbl&gt;\n\n\nWe can have multiple conditions, combined with and/or statements.\n\n# filter with \"and\" condition: use &\nnew.df = df |&gt;\n  filter(countryname == \"australia\" & voc == 1)  # keep obs from australia that also are voc == 1\n\n# filter with \"or\" condition: use |\nnew.df = df |&gt;\n  filter(countryname == \"australia\" | countryname == \"belgium\")  # keep obs from australia or belgium\n\nThe comparison operators in R are as follows:\n\n==  # equal\n!=  # not equal\n&gt;   # greater than\n&gt;=  # greater than or equal\n&lt;   # less than\n&lt;=  # less than or equal\n\n\n\n\n\n\n\n\n\n\n\n\n\nadding variables\nWe can add variables to our data frames.\n\nRPythonJulia\n\n\nWe can create a new variable newvar with the mutate() function:\n\ndf = df |&gt;\n  mutate(newvar = gini + 10)  # create newvar, and make the values equal to gini + 10\n\nhead(df$newvar)               # we can see values of newvar here now\n\n#&gt; [1] 43.1 43.1 43.1 43.1 45.4 45.4\n\n\nYou can assign any “rule” to create the new variable.\n\nAbove, I did a simple of gini + 10, which takes the initial gini variable and adds 10 to each observation to create the new variable newvar.\nWe can use any operator like addition, subtraction, division, etc.\nWe can also assign values based on ifelse() statements and other rules (see control flow section).\n\nFor example, we can assign newvar to equal 10 if voc == 1, and 20 otherwise:\n\ndf = df |&gt;\n  mutate(newvar = ifelse(voc == 1, 10, 20))\n\nhead(df$newvar)         # we can see values of newvar here now\n\n#&gt; [1] 20 20 20 20 20 20\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmissing values\nMissing values are often present in data. These can cause issues with estimation and models, so we need some way of identifying and getting rid of them.\n\nRPythonJulia\n\n\nMissing values are coded as NA or NaN in dataframes.\nTo detect missing values, we can use the is.na() function. This function detects if there is a missing value in each position of a dataframe or vector, and outputs a TRUE or FALSE, with TRUE indicating a missing value.\n\n# check for NAs in varaible voc of dataframe df\nis.na(df$voc) |&gt; head()  # head() to avoid long output, you do not need head()\n\n#&gt; [1] FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nWe can replace any NAs with an if-else statement. For example, we might want to replace any NA in variable voc with the value 0:\n\ndf$voc &lt;- ifelse(\n  test  = is.na(df$voc) == TRUE,  # check if obs is a NA\n  yes   = 0,                      # if it is NA, replace with 0\n  no    = df$voc                  # if not NA, keep original voc value\n)\n\nWe can also omit any observations with NA values from the dataframe or vector of interest with the na.omit() function:\n\ndf = na.omit(df)  # omit any observation with NA value\n\n\n\n\n\n\n\n\n\n\n\n\n\nvariable types\nIt is important to ensure our variables are of the correct type, to ensure our analysis works as intended.\n\nRPythonJulia\n\n\nR variables can be of many different “types”, which operate differently in analysis.\nNumeric variables are any number, including decimals and negatives. We can coerce any variable into a numeric type with the as.numeric() function:\n\n# convert variable voc into numeric type\ndf$voc = as.numeric(df$voc)\n\nInteger variables are variables that only take values of integers, i.e. whole numbers. We can coerce any variable into an integer type with the as.integer() function:\n\n# convert variable voc into integer type\ndf$voc = as.integer(df$voc)\n\nFactor variables are variables that will be treated as categorical/binary variables in statistical analysis (ex. male/female, yes/no, country). We can coerce any variable into a factor type with the as.factor() function:\n\n# convert variable voc into factor type\ndf$voc = as.factor(df$voc)\n\nCharacter strings are variables that contain letters and symbols. We rarely wish to change other types into characters, but it is possible to coerce any variable into a character type with the as.character() function:\n\n# convert variable voc into factor type\ndf$voc = as.character(df$voc)\n\n\n\n\n\n\n\n\n\n\n\n\n\nmerging dataframes\nWe can merge dataframes together to form bigger dataframes for anlaysis. We can either merge together two dataframes with the same observations but different variables (column binding), or merge together two dataframes with the same variables but different observations (joining).\n\nRPythonJulia\n\n\nTo merge two dataframes with different variables but the same observations (so merging columns), we can use the cbind() function. For example, here we have two dataframes, each with 3 variables, including id that indicates each observation. We can merge them together to form a new dataframe:\n\nhead(df1, 1)               # look at df1\n\n#&gt; # A tibble: 1 × 3\n#&gt;      id   voc  gini\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     1     0  33.1\n\nhead(df2, 1)               # look at df2\n\n#&gt; # A tibble: 1 × 3\n#&gt;      id export socialexp\n#&gt;   &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n#&gt; 1     1   18.2      17.2\n\nnew.df = cbind(df1, df2)  # combine df1 and df2\n\nhead(new.df)              # see that df1 and df2 have combined\n\n#&gt;   id voc gini id export socialexp\n#&gt; 1  1   0 33.1  1 18.224    17.197\n#&gt; 2  2   0 33.1  2 19.854    16.660\n#&gt; 3  3   0 33.1  3 20.184    15.699\n#&gt; 4  4   0 33.1  4 20.149    15.858\n#&gt; 5  5   0 35.4  5 23.011    17.050\n#&gt; 6  6   0 35.4  6 19.795    16.853\n\n\nThe joining will be based on the shared variable between the two dataframes. This is usually an observation id.\nTo merge two dataframes with the same variables but different observations (essentially joining more observations together), we can use the full_join() function:\n\n# df1 has australia obs, df2 has belgium obs\nnew.df = full_join(df1, df2)\n\nThe joining will be done by the shared variables (columns).",
    "crumbs": [
      "data wrangling"
    ]
  },
  {
    "objectID": "stats.html",
    "href": "stats.html",
    "title": "summary stats",
    "section": "",
    "text": "stats by variable\n\n\nsummary stats table\n\n\nstats by group\n\n\nlength and unique\n\n\ncorrelations",
    "crumbs": [
      "summary stats"
    ]
  },
  {
    "objectID": "plot.html",
    "href": "plot.html",
    "title": "plotting",
    "section": "",
    "text": "box and whisker\n\n\nbar plots\n\n\nscatterplots\n\n\nestimate plots\nwith confidence intervals\n\n\ngrid plots\ngrids of multiple plots\n\n\nadding lines\n\n\nlabel graphs\n\n\nlegends\n\n\nthemes",
    "crumbs": [
      "plotting"
    ]
  },
  {
    "objectID": "ds.html",
    "href": "ds.html",
    "title": "data science",
    "section": "",
    "text": "random forest\n\n\npca\n\n\nfactor anlaysis\n\n\nk-means cluster",
    "crumbs": [
      "data science"
    ]
  },
  {
    "objectID": "metrics.html",
    "href": "metrics.html",
    "title": "econometrics",
    "section": "",
    "text": "fixed effects\n\n\niv estimator\n\n\nreg discontinuity\n\n\ndid twfe\n\n\ndid event study\n\n\ncsdid\n\n\narima\n\n\ngarch",
    "crumbs": [
      "econometrics"
    ]
  }
]