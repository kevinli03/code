# data cleaning {.unnumbered}

::: small
missing values, variable types
:::

This page covers how to manipulate data. Use the sidebar to navigate between different sections. The packages required are:

::: panel-tabset
## R

For the R code on this page, we will need the `dplyr` package.

```{r}
#| warning: false
#| message: false

# packages needed:
library(dplyr)
```

`dplyr` is part of the `tidyverse` package, so you can choose to load `tidyverse` instead.

```{r}
#| echo: false
#| message: false
#| warning: false

df = readr::read_csv('data.csv')
```

## Python

## Julia
:::

<br />

#### missing values

Missing values are often present in data. These can cause issues with estimation and models, so we need some way of identifying and getting rid of them.

::: panel-tabset
## R

Missing values are coded as `NA` or `NaN` in dataframes.

To detect missing values, we can use the `is.na()` function. This function detects if there is a missing value in each position of a dataframe or vector, and outputs a `TRUE` or `FALSE`, with `TRUE` indicating a missing value.

```{r}
#| comment: "#>"
#| class-output: r
#| warning: false
#| message: false

is.na(df$voc) |> head()  # head() to avoid long output, you do not need head()
```

We can replace any NAs with an if-else statement. For example, we might want to replace any `NA` in variable `voc` with the value `0`:

```{r}
#| comment: "#>"
#| class-output: r
#| warning: false
#| message: false
#| eval: false


df$voc <- ifelse(
  test  = is.na(df$voc) == TRUE,  # check if obs is a NA
  yes   = 0,                      # if it is NA, replace with 0
  no    = df$voc                  # if not NA, keep original voc value
)
```

We can also omit any observations with `NA` values from the dataframe or vector of interest with the `na.omit()` function:

```{r}
#| comment: "#>"
#| class-output: r
#| warning: false
#| message: false
#| eval: false

df = na.omit(df)  # omit any observation with NA value
```

## Python

## Julia
:::

<br />

#### variable types

It is important to ensure our variables are of the correct type, to ensure our analysis works as intended.

::: panel-tabset
## R

R variables can be of many different "types", which operate differently in analysis.

Numeric variables are any number, including decimals and negatives. We can coerce any variable into a numeric type with the `as.numeric()` function:

```{r}
#| eval: false

# convert variable voc into numeric type
df$voc = as.numeric(df$voc)
```

Integer variables are variables that only take values of integers, i.e. whole numbers. We can coerce any variable into an integer type with the `as.integer()` function:

```{r}
#| eval: false

# convert variable voc into integer type
df$voc = as.integer(df$voc)
```

Factor variables are variables that will be treated as categorical/binary variables in statistical analysis (ex. male/female, yes/no, country). We can coerce any variable into a factor type with the `as.factor()` function:

```{r}
#| eval: false

# convert variable voc into factor type
df$voc = as.factor(df$voc)
```

Character strings are variables that contain letters and symbols. We rarely wish to change other types into characters, but it is possible to coerce any variable into a character type with the `as.character()` function:

```{r}
#| eval: false

# convert variable voc into factor type
df$voc = as.character(df$voc)
```

## Python

## Julia
:::

<br />
