# data wrangling {.unnumbered}

::: small
adding variables, merging data
:::

This page covers how to manipulate data. Use the sidebar to navigate between different sections. The packages required are:

::: panel-tabset
## R

For the R code on this page, we will need the `dplyr` package.

```{r}
#| warning: false
#| message: false

# packages needed:
library(dplyr)
```

`dplyr` is part of the `tidyverse` package, so you can choose to load `tidyverse` instead.

```{r}
#| echo: false
#| message: false
#| warning: false

df = readr::read_csv('data.csv')
```

## Python

## Julia
:::

<br />

#### adding variables

We can add variables to our data frames.

::: panel-tabset
## R

We can create a new variable `newvar` with the `mutate()` function: You can assign any "rule" to create the new variable.

-   We can use any operator like addition, subtraction, division, etc.
-   We can also assign values based on `ifelse()` statements and other rules (see [basic syntax](syntax.qmd)).

For example, we can assign `newvar` to equal `10` if `voc == 1`, and `20` otherwise:

```{r}
#| comment: "#>"
#| class-output: r
#| warning: false
#| message: false

df = df |>
  mutate(newvar = ifelse(voc == 1, 10, 20))

df$newvar |> head()           # we can see values of newvar here now
```

## Python

## Julia
:::

<br />

#### merging data

We can merge dataframes together to form bigger dataframes for anlaysis. We can either merge together two dataframes with the same observations but different variables (column binding), or merge together two dataframes with the same variables but different observations (joining).

::: panel-tabset
## R

```{r}
#| echo: false
#| message: false
#| warning: false

# split df's for cbind() demonstration
df1 = df |>
  select(id, voc, gini)

df2 = df |>
  select(id, export, socialexp)
```

To merge two dataframes with different variables but the same observations (so merging columns), we can use the `cbind()` function. For example, here we have two dataframes, each with 3 variables, including `id` that indicates each observation. We can merge them together to form a new dataframe:

```{r}
#| comment: "#>"
#| class-output: r
#| warning: false
#| message: false

head(df1, 1)               # look at df1
head(df2, 1)               # look at df2

new.df = cbind(df1, df2)  # combine df1 and df2

head(new.df)              # see that df1 and df2 have combined

```

The joining will be based on the shared variable between the two dataframes. This is usually an observation id.

To merge two dataframes with the same variables but different observations (essentially joining more observations together), we can use the `full_join()` function:

```{r}
#| eval: false

# df1 has australia obs, df2 has belgium obs
new.df = full_join(df1, df2)
```

The joining will be done by the shared variables (columns).

## Python

## Julia
:::

<br />
