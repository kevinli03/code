# objects {.unnumbered}

::: small
vectors, dataframes, indexing
:::

This page introduces the basics of objects, including vectors, dataframes, and indexing, from a statistics/data perspective. The packages required for this page are:

::: panel-tabset
## R

No packages are required for R.

## Python

## Julia
:::

<br />

#### vectors

We can assign multiple values to an object using vectors. Vectors are the building block of most data analysis.

::: panel-tabset
## R

We can assign multiple values to an object by using the `c()` concatenate function:

```{r}
#| comment: "#>"
#| class-output: r
#| warning: false
#| message: false
#| results: hold

x = c(1,3,5)                             # vector of length 3
y = c(4:10)                              # creates vector of 4,5,6,7,...10
z = c("Australia", "Belgium", "France")  # char string vector

print(x)
print(y)
print(z)
```

Each element of a vector has a position. We can extract one element of the vector using indexing with brackets `[]`:

```{r}
#| comment: "#>"
#| class-output: r
#| warning: false
#| message: false

x[3]  # 3rd element of x
```

All elements within a vector must be of the same type.

## Python

## Julia
:::

<br />

#### dataframes

Dataframes are a combination of multiple column vectors, where each vector represents a variable in the data.

::: panel-tabset
## R

We start off by creating [vectors](syntax.qmd#vectors), each vector being a variable.

```{r}
person = c(1:5)
age = c(10,20,13,14,12)
name = c("bob", "ana", "mia", "pop", "ben")
```

We then use the `data.frame()` function to join these vectors into a dataframe:

```{r}
#| comment: "#>"
#| class-output: r
#| warning: false
#| message: false

df = data.frame(person, age, name)

print(df)
```

We now have a dataframe.

## Python

## Julia
:::

<br />

#### indexing

Indexing allows us to select certain variables and elements within a dataframe, which allows us to perform operations on them.

::: panel-tabset
## R

We can index for a specific variable (column) by using the syntax `df$variable`:

```{r}
#| comment: "#>"
#| class-output: r
#| warning: false
#| message: false

print(df$age)
```

As `df$variable` is a vector, we can index like we did [previously](syntax.qmd#vectors).

We can also index elements by row and column number. The syntax is given by `df[row, col]`. For example:

```{r}
#| comment: "#>"
#| class-output: r
#| warning: false
#| message: false

df[2,]   # extract 2nd row
df[,2]   # extract 2nd column
df[2,2]  # exrtract the element at row = 2 and col = 2
```

We will discuss subsetting the data (extracting more than 1 row and 1 column) in [data wrangling](data.qmd).

## Python

## Julia
:::

<br />

#### 
